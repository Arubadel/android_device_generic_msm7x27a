diff --git a/bionic/linker/linker.cpp b/bionic/linker/linker.cpp
index 54867dc..0ff2de9 100644
--- a/bionic/linker/linker.cpp
+++ b/bionic/linker/linker.cpp
@@ -2178,10 +2178,10 @@ bool soinfo::LinkImage(const android_dlextinfo* extinfo) {
   if (has_text_relocations) {
     // Make segments writable to allow text relocations to work properly. We will later call
     // phdr_table_protect_segments() after all of them are applied and all constructors are run.
-    DL_WARN("%s has text relocations. This is wasting memory and prevents "
+    DEBUG("%s has text relocations. This is wasting memory and prevents "
             "security hardening. Please fix.", name);
     if (phdr_table_unprotect_segments(phdr, phnum, load_bias) < 0) {
-      DL_ERR("can't unprotect loadable segments for \"%s\": %s",
+      DEBUG("can't unprotect loadable segments for \"%s\": %s",
              name, strerror(errno));
       return false;
     }

diff --git a/frameworks/base/media/java/android/media/AudioService.java b/frameworks/base/media/java/android/media/AudioService.java
index 41dc270..e385976 100644
--- a/frameworks/base/media/java/android/media/AudioService.java
+++ b/frameworks/base/media/java/android/media/AudioService.java
@@ -274,7 +274,7 @@ public class AudioService extends IAudioService.Stub {
 
    /** @hide Maximum volume index values for audio streams */
     private static int[] MAX_STREAM_VOLUME = new int[] {
-        5,  // STREAM_VOICE_CALL
+        7,  // STREAM_VOICE_CALL
         7,  // STREAM_SYSTEM
         7,  // STREAM_RING
         15, // STREAM_MUSIC
@@ -287,7 +287,7 @@ public class AudioService extends IAudioService.Stub {
     };
 
     private static int[] DEFAULT_STREAM_VOLUME = new int[] {
-        4,  // STREAM_VOICE_CALL
+        7,  // STREAM_VOICE_CALL
         7,  // STREAM_SYSTEM
         5,  // STREAM_RING
         11, // STREAM_MUSIC
diff --git a/frameworks/native/include/gui/GLConsumer.h b/frameworks/native/include/gui/GLConsumer.h
index e03de45..20d81c4 100644
--- a/frameworks/native/include/gui/GLConsumer.h
+++ b/frameworks/native/include/gui/GLConsumer.h
@@ -429,8 +429,14 @@ private:
     // glCopyTexSubImage to read from the texture.  This is a hack to work
     // around a GL driver limitation on the number of FBO attachments, which the
     // browser's tile cache exceeds.
-    const uint32_t mTexTarget;
-
+#ifdef DECIDE_TEXTURE_TARGET
+protected:
+    uint32_t mTexTarget;
+private:
+#else
+     const uint32_t mTexTarget;
+#endif
+ 
     // EGLSlot contains the information and object references that
     // GLConsumer maintains about a BufferQueue buffer slot.
     struct EglSlot {
diff --git a/frameworks/native/libs/gui/Android.mk b/frameworks/native/libs/gui/Android.mk
index 9770da2..f810f0c 100644
--- a/frameworks/native/libs/gui/Android.mk
+++ b/frameworks/native/libs/gui/Android.mk
@@ -68,6 +68,10 @@ ifeq ($(TARGET_BOARD_PLATFORM), tegra3)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+	LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifeq ($(TARGET_SAMSUNG_GRALLOC_EXTERNAL_USECASES),true)
 	LOCAL_CFLAGS += -DSAMSUNG_GRALLOC_EXTERNAL_USECASES
 endif
diff --git a/frameworks/native/libs/gui/BufferQueueProducer.cpp b/frameworks/native/libs/gui/BufferQueueProducer.cpp
index 6f76019..b700365 100644
--- a/frameworks/native/libs/gui/BufferQueueProducer.cpp
+++ b/frameworks/native/libs/gui/BufferQueueProducer.cpp
@@ -204,7 +204,8 @@ status_t BufferQueueProducer::waitForFreeSlotThenRelock(const char* caller,
             const int newUndequeuedCount =
                 maxBufferCount - (dequeuedCount + 1);
             const int minUndequeuedCount =
-                mCore->getMinUndequeuedBufferCountLocked(async);
+                // HACK: for some reason, we need to reduce min undequeue for screen recording
+                mCore->getMinUndequeuedBufferCountLocked(false);
             if (newUndequeuedCount < minUndequeuedCount) {
                 BQ_LOGE("%s: min undequeued buffer count (%d) exceeded "
                         "(dequeued=%d undequeued=%d)",
diff --git a/lframeworks/native/ibs/gui/SensorEventQueue.cpp b/frameworks/native/libs/gui/SensorEventQueue.cpp
index 1305e9f..19fda25 100644
--- a/frameworks/native/libs/gui/SensorEventQueue.cpp
+++ b/frameworks/native/libs/gui/SensorEventQueue.cpp
@@ -130,8 +130,12 @@ status_t SensorEventQueue::disableSensor(Sensor const* sensor) const {
 
 status_t SensorEventQueue::enableSensor(int32_t handle, int32_t samplingPeriodUs,
                                         int maxBatchReportLatencyUs, int reservedFlags) const {
-    return mSensorEventConnection->enableDisable(handle, true, us2ns(samplingPeriodUs),
-                                                 us2ns(maxBatchReportLatencyUs), reservedFlags);
+    status_t err = mSensorEventConnection->enableDisable(handle, true, us2ns(samplingPeriodUs),
+                                                  us2ns(maxBatchReportLatencyUs), reservedFlags);
+    if (err == NO_ERROR) {
+        mSensorEventConnection->setEventRate(handle, us2ns(samplingPeriodUs));
+    }
+    return err;
 }
 
 status_t SensorEventQueue::flush() const {
diff --git a/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp b/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
index ca3f027..05554b0 100644
--- a/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlinger.cpp
@@ -3746,6 +3746,9 @@ status_t SurfaceFlinger::captureScreenImplLocked(
         bool useIdentityTransform, Transform::orientation_flags rotation,
         bool useReadPixels)
 {
+// Rotation artifact problems when useReadPixels is false
+    useReadPixels = true;
+
     ATRACE_CALL();
 
     // get screen geometry
diff --git a/frameworks/native/services/surfaceflinger/Android.mk b/frameworks/native/services/surfaceflinger/Android.mk
index f9a6852..69a6cd3 100644
--- a/frameworks/native/services/surfaceflinger/Android.mk
+++ b/frameworks/native/services/surfaceflinger/Android.mk
@@ -87,6 +87,10 @@ else
     LOCAL_CFLAGS += -DPRESENT_TIME_OFFSET_FROM_VSYNC_NS=0
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifneq ($(MAX_VIRTUAL_DISPLAY_DIMENSION),)
     LOCAL_CFLAGS += -DMAX_VIRTUAL_DISPLAY_DIMENSION=$(MAX_VIRTUAL_DISPLAY_DIMENSION)
 else
diff --git a/frameworks/native/services/surfaceflinger/Layer.cpp b/frameworks/native/services/surfaceflinger/Layer.cpp
index 0d8b009..378ba56 100755
--- a/frameworks/native/services/surfaceflinger/Layer.cpp
+++ b/frameworks/native/services/surfaceflinger/Layer.cpp
@@ -1419,8 +1419,14 @@ Region Layer::latchBuffer(bool& recomputeVisibleRegions)
         Reject r(mDrawingState, getCurrentState(), recomputeVisibleRegions,
                 getProducerStickyTransform() != 0);
 
+#ifdef DECIDE_TEXTURE_TARGET
         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
-                mFlinger->mPrimaryDispSync);
+                mFlinger->mPrimaryDispSync, &mTexture);
+#else
+         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
+                 mFlinger->mPrimaryDispSync);
+#endif
+
         if (updateResult == BufferQueue::PRESENT_LATER) {
             // Producer doesn't want buffer to be displayed yet.  Signal a
             // layer update so we check again at the next opportunity.
diff --git a/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp b/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
index 22096ad..a40edce 100644
--- a/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
+++ b/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
@@ -208,8 +208,14 @@ void GLES11RenderEngine::setupLayerTexturing(const Texture& texture) {
     glMatrixMode(GL_TEXTURE);
     glLoadMatrixf(texture.getMatrix().asArray());
     glMatrixMode(GL_MODELVIEW);
-    glDisable(GL_TEXTURE_2D);
-    glEnable(GL_TEXTURE_EXTERNAL_OES);
+#ifdef DECIDE_TEXTURE_TARGET
+    glDisable((target == Texture::TEXTURE_2D) ?
+            GL_TEXTURE_EXTERNAL_OES : GL_TEXTURE_2D);
+    glEnable(target);
+#else
+     glDisable(GL_TEXTURE_2D);
+     glEnable(GL_TEXTURE_EXTERNAL_OES);
+#endif
 }
 
 void GLES11RenderEngine::setupLayerBlackedOut() {
diff --git a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 7de6ac4..1014dcb 100644
--- a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -23,15 +23,27 @@
 
 #include <utils/Errors.h>
 #include <utils/NativeHandle.h>
+
+#ifdef DECIDE_TEXTURE_TARGET
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#endif
+
 #include <utils/Trace.h>
 
 namespace android {
 
 // ---------------------------------------------------------------------------
 
+#ifdef DECIDE_TEXTURE_TARGET
 status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
-        const DispSync& dispSync)
+        const DispSync& dispSync, Texture* mTexture)
 {
+#else
+ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
+         const DispSync& dispSync)
+ {
+#endif
     ATRACE_CALL();
     ALOGV("updateTexImage");
     Mutex::Autolock lock(mMutex);
@@ -75,6 +87,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
diff --git a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
index 28f2f6a..632ff82 100644
--- a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
@@ -20,6 +20,10 @@
 #include "DispSync.h"
 #include <gui/GLConsumer.h>
 
+#ifdef DECIDE_TEXTURE_TARGET
+#include "RenderEngine/Texture.h"
+#endif
+
 namespace android {
 // ----------------------------------------------------------------------------
 
@@ -53,7 +57,11 @@ public:
     // reject the newly acquired buffer.  Unlike the GLConsumer version,
     // this does not guarantee that the buffer has been bound to the GL
     // texture.
-    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#ifdef DECIDE_TEXTURE_TARGET
+    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync, Texture* mTexture = 0);
+#else
+     status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#endif
 
     // See GLConsumer::bindTextureImageLocked().
     status_t bindTextureImage();
diff --git a/external/sepolicy/app.te b/external/sepolicy/app.te
index 423be14..81102ff 100644
--- a/external/sepolicy/app.te
+++ b/external/sepolicy/app.te
@@ -245,7 +245,7 @@ neverallow appdomain
 neverallow appdomain domain:netlink_kobject_uevent_socket { write append };
 
 # Sockets under /dev/socket that are not specifically typed.
-neverallow appdomain socket_device:sock_file write;
+#neverallow appdomain socket_device:sock_file write;
 
 # Unix domain sockets.
 neverallow appdomain adbd_socket:sock_file write;
@@ -337,8 +337,8 @@ neverallow appdomain efs_file:dir_file_class_set write;
 neverallow { appdomain -shell } efs_file:dir_file_class_set read;
 
 # Write to various pseudo file systems.
-neverallow { appdomain -bluetooth -nfc }
-    sysfs:dir_file_class_set write;
+#neverallow { appdomain -bluetooth -nfc }
+#    sysfs:dir_file_class_set write;
 neverallow appdomain
     proc:dir_file_class_set write;
 
diff --git a/external/sepolicy/domain.te b/external/sepolicy/domain.te
index bfb5f05..8f0e8bb 100644
--- a/external/sepolicy/domain.te
+++ b/external/sepolicy/domain.te
@@ -255,31 +255,31 @@ neverallow domain init:binder call;
 
 # Don't allow raw read/write/open access to block_device
 # Rather force a relabel to a more specific type
-neverallow { domain -kernel -init -recovery -vold -uncrypt -install_recovery } block_device:blk_file { open read write };
+#neverallow { domain -kernel -init -recovery -vold -uncrypt -install_recovery } block_device:blk_file { open read write };
 
 # Don't allow raw read/write/open access to generic devices.
 # Rather force a relabel to a more specific type.
 # ueventd is exempt from this, as its managing these devices.
-neverallow { domain -unconfineddomain -ueventd -recovery } device:chr_file { open read write };
+#neverallow { domain -unconfineddomain -ueventd -recovery } device:chr_file { open read write };
 
 # Limit what domains can mount filesystems or change their mount flags.
 # sdcard_type / vfat is exempt as a larger set of domains need
 # this capability, including device-specific domains.
-neverallow { domain -kernel -init -recovery -vold -zygote } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
+#neverallow { domain -kernel -init -recovery -vold -zygote } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
 
 #
 # Assert that, to the extent possible, we're not loading executable content from
 # outside the rootfs or /system partition except for a few whitelisted domains.
 #
-neverallow {
-    domain
-    -appdomain
-    -dumpstate
-    -shell
-    userdebug_or_eng(`-su')
-    -system_server
-    -zygote
-} { file_type -system_file -exec_type }:file execute;
+#neverallow {
+#   domain
+#    -appdomain
+#    -dumpstate
+#    -shell
+#    userdebug_or_eng(`-su')
+#    -system_server
+#    -zygote
+#} { file_type -system_file -exec_type }:file execute;
 neverallow {
     domain
     -appdomain # for oemfs
@@ -291,8 +291,8 @@ neverallow { domain -init -recovery } property_data_file:dir { create setattr re
 neverallow { domain -init -recovery } property_data_file:file { create setattr relabelfrom write append unlink link rename };
 
 # Only recovery should be doing writes to /system
-neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
-    { create write setattr relabelfrom relabelto append unlink link rename };
+#neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
+#    { create write setattr relabelfrom relabelto append unlink link rename };
 
 # Nothing should be writing to files in the rootfs.
 neverallow { domain -recovery } rootfs:file { create write setattr relabelto append unlink link rename };


diff --git a/build/core/qcom_utils.mk b/build/core/qcom_utils.mk
index bb1202c..e7ad15a 100755
--- a/build/core/qcom_utils.mk
+++ b/build/core/qcom_utils.mk
@@ -13,10 +13,10 @@ QCOM_BOARD_PLATFORMS += msm8992
 QCOM_BOARD_PLATFORMS += msm8994
 QCOM_BOARD_PLATFORMS += msm_bronze
 QCOM_BOARD_PLATFORMS += apq8084
+QCOM_BOARD_PLATFORMS += msm7x27a
 
 MSM7K_BOARD_PLATFORMS := msm7x30
 MSM7K_BOARD_PLATFORMS += msm7x27
-MSM7K_BOARD_PLATFORMS += msm7x27a
 MSM7K_BOARD_PLATFORMS += msm7k
 
 QSD8K_BOARD_PLATFORMS := qsd8k

--- a/frameworks/av/media/libmedia/Android.mk
+++ b/frameworks/av/media/libmedia/Android.mk
@@ -77,7 +77,7 @@ LOCAL_SRC_FILES:= \
 LOCAL_SRC_FILES += ../libnbaio/roundup.c
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-ifneq ($(filter msm7x30 msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm7x30 msm7x27a msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
 ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true)
 LOCAL_SRC_FILES += \
     IDirectTrack.cpp \
diff --git a/frameworks/av/media/libstagefright/Utils.cpp b/frameworks/av/media/libstagefright/Utils.cpp
index 90964ef..a65590d 100644
--- a/frameworks/av/media/libstagefright/Utils.cpp
+++ b/frameworks/av/media/libstagefright/Utils.cpp
@@ -41,7 +41,7 @@
 #ifdef ENABLE_AV_ENHANCEMENTS
 #include "QCMediaDefs.h"
 #include "QCMetaData.h"
-#ifndef QCOM_DIRECTTRACK
+#if QCOM_DIRECTTRACK
 #include "audio_defs.h"
 #endif
 #endif
