diff --git a/bionic/linker/linker.cpp b/bionic/linker/linker.cpp
index 54867dc..0ff2de9 100644
--- a/bionic/linker/linker.cpp
+++ b/bionic/linker/linker.cpp
@@ -2178,10 +2178,10 @@ bool soinfo::LinkImage(const android_dlextinfo* extinfo) {
   if (has_text_relocations) {
     // Make segments writable to allow text relocations to work properly. We will later call
     // phdr_table_protect_segments() after all of them are applied and all constructors are run.
-    DL_WARN("%s has text relocations. This is wasting memory and prevents "
+    DEBUG("%s has text relocations. This is wasting memory and prevents "
             "security hardening. Please fix.", name);
     if (phdr_table_unprotect_segments(phdr, phnum, load_bias) < 0) {
-      DL_ERR("can't unprotect loadable segments for \"%s\": %s",
+      DEBUG("can't unprotect loadable segments for \"%s\": %s",
              name, strerror(errno));
       return false;
     }
diff --git a/frameworks/av/include/media/stagefright/MediaCodecSource.h b/frameworks/av/include/media/stagefright/MediaCodecSource.h
index edd6494..a376809 100644
--- a/frameworks/av/include/media/stagefright/MediaCodecSource.h
+++ b/frameworks/av/include/media/stagefright/MediaCodecSource.h
@@ -40,8 +40,11 @@ class MetaData;
 struct MediaCodecSource : public MediaSource,
                           public MediaBufferObserver {
     enum FlagBits {
-        FLAG_USE_SURFACE_INPUT      = 1,
-        FLAG_USE_METADATA_INPUT     = 2,
+        FLAG_USE_SURFACE_INPUT           = 1,
+        FLAG_USE_METADATA_INPUT          = 2,
+#ifdef USE_SUBMIT_ONE_INPUT_BUFFER
+	FLAG_USE_SUBMIT_ONE_INPUT_BUFFER = 3,
+#endif
     };
 
     static sp<MediaCodecSource> Create(
diff --git a/frameworks/av/media/libmedia/Android.mk b/frameworks/av/media/libmedia/Android.mk
index 73157bb..70112de 100644
--- a/frameworks/av/media/libmedia/Android.mk
+++ b/frameworks/av/media/libmedia/Android.mk
@@ -77,7 +77,7 @@ LOCAL_SRC_FILES:= \
 LOCAL_SRC_FILES += ../libnbaio/roundup.c
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-ifneq ($(filter msm7x30 msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm7x30 msm7x27a msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
 ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true)
 LOCAL_SRC_FILES += \
     IDirectTrack.cpp \
@@ -87,11 +87,9 @@ endif
 endif
 
 #QTI Resampler
-ifeq ($(call is-vendor-board-platform,QCOM),true)
 ifeq ($(strip $(AUDIO_FEATURE_ENABLED_EXTN_RESAMPLER)),true)
 LOCAL_CFLAGS += -DQTI_RESAMPLER
 endif
-endif
 #QTI Resampler
 
 ifeq ($(TARGET_ENABLE_QC_AV_ENHANCEMENTS),true)
diff --git a/frameworks/av/media/libmediaplayerservice/Android.mk b/frameworks/av/media/libmediaplayerservice/Android.mk
index 8f06c55..c906412 100644
--- a/frameworks/av/media/libmediaplayerservice/Android.mk
+++ b/frameworks/av/media/libmediaplayerservice/Android.mk
@@ -73,6 +73,10 @@ ifeq ($(strip $(AUDIO_FEATURE_ENABLED_EXTN_FLAC_DECODER)),true)
 endif
 endif
 
+ifeq ($(TARGET_BOARD_PLATFORM),msm7x27a)
+    LOCAL_CFLAGS += -DUSE_SUBMIT_ONE_INPUT_BUFFER
+endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 include $(call all-makefiles-under,$(LOCAL_PATH))
diff --git a/frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp b/frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
index 90d4a25..bc10e1a 100644
--- a/frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
+++ b/frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
@@ -1339,6 +1339,9 @@ void StagefrightRecorder::clipVideoFrameWidth() {
 
 status_t StagefrightRecorder::checkVideoEncoderCapabilities(
         bool *supportsCameraSourceMetaDataMode) {
+#ifdef USE_SUBMIT_ONE_INPUT_BUFFER
+    *supportsCameraSourceMetaDataMode = true;
+#else
     /* hardware codecs must support camera source meta data mode */
     Vector<CodecCapabilities> codecs;
     OMXClient client;
@@ -1355,6 +1358,7 @@ status_t StagefrightRecorder::checkVideoEncoderCapabilities(
             false /* decoder */, true /* hwCodec */, &codecs);
 
     *supportsCameraSourceMetaDataMode = codecs.size() > 0;
+#endif
     ALOGV("encoder %s camera source meta-data mode",
             *supportsCameraSourceMetaDataMode ? "supports" : "DOES NOT SUPPORT");
 
@@ -1726,6 +1730,9 @@ status_t StagefrightRecorder::setupVideoEncoder(
     uint32_t flags = 0;
     if (mIsMetaDataStoredInVideoBuffers) {
         flags |= MediaCodecSource::FLAG_USE_METADATA_INPUT;
+#ifdef USE_SUBMIT_ONE_INPUT_BUFFER
+        flags |= MediaCodecSource::FLAG_USE_SUBMIT_ONE_INPUT_BUFFER;
+#endif
     }
 
     if (cameraSource == NULL) {
diff --git a/frameworks/av/media/libstagefright/Android.mk b/frameworks/av/media/libstagefright/Android.mk
index 6131388..5628cf2 100644
--- a/frameworks/av/media/libstagefright/Android.mk
+++ b/frameworks/av/media/libstagefright/Android.mk
@@ -126,7 +126,7 @@ LOCAL_SHARED_LIBRARIES := \
         libpowermanager
 
 ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-ifneq ($(filter msm7x30 msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm7x30 msm7x27a msm8660 msm8960,$(TARGET_BOARD_PLATFORM)),)
 ifeq ($(BOARD_USES_LEGACY_ALSA_AUDIO),true)
    ifeq ($(USE_TUNNEL_MODE),true)
         LOCAL_CFLAGS += -DUSE_TUNNEL_MODE
@@ -144,14 +144,12 @@ LOCAL_CFLAGS += -DBOARD_CANT_REALLOCATE_OMX_BUFFERS
 endif
 
 #QTI FLAC Decoder
-ifeq ($(call is-vendor-board-platform,QCOM),true)
 LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/mm-audio
 ifeq ($(strip $(AUDIO_FEATURE_ENABLED_EXTN_FLAC_DECODER)),true)
 LOCAL_SRC_FILES += FLACDecoder.cpp
 LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/mm-audio/audio-flac
 LOCAL_CFLAGS += -DQTI_FLAC_DECODER
 endif
-endif
 
 LOCAL_STATIC_LIBRARIES := \
         libstagefright_color_conversion \
@@ -166,8 +164,6 @@ LOCAL_STATIC_LIBRARIES := \
         libFLAC \
         libmedia_helper
 
-ifeq ($(call is-vendor-board-platform,QCOM),true)
-
 ifeq ($(TARGET_USES_QCOM_BSP), true)
     LOCAL_C_INCLUDES += $(call project-path-for,qcom-display)/libgralloc
 endif
@@ -184,7 +180,6 @@ endif #TARGET_ENABLE_AV_ENHANCEMENTS
 ifeq ($(strip $(AUDIO_FEATURE_ENABLED_FLAC_OFFLOAD)),true)
        LOCAL_CFLAGS     += -DFLAC_OFFLOAD_ENABLED
 endif
-endif
 
 ifeq ($(BOARD_USE_S3D_SUPPORT), true)
 ifeq ($(BOARD_USES_HWC_SERVICES), true)
@@ -264,6 +259,10 @@ ifeq ($(BOARD_USE_SEIREN_AUDIO), true)
 LOCAL_CFLAGS += -DUSE_SEIREN_AUDIO
 endif
 
+ifeq ($(TARGET_BOARD_PLATFORM),msm7x27a)
+    LOCAL_CFLAGS += -DUSE_SUBMIT_ONE_INPUT_BUFFER
+endif
+
 LOCAL_MODULE:= libstagefright
 
 LOCAL_MODULE_TAGS := optional
diff --git a/frameworks/av/media/libstagefright/MediaCodecSource.cpp b/frameworks/av/media/libstagefright/MediaCodecSource.cpp
index 7c81570..2134ab4 100644
--- a/frameworks/av/media/libstagefright/MediaCodecSource.cpp
+++ b/frameworks/av/media/libstagefright/MediaCodecSource.cpp
@@ -432,6 +432,12 @@ status_t MediaCodecSource::initEncoder() {
         mOutputFormat->setInt32("store-metadata-in-buffers", 1);
     }
 
+#ifdef USE_SUBMIT_ONE_INPUT_BUFFER
+	if (mFlags & FLAG_USE_SUBMIT_ONE_INPUT_BUFFER) {
+        mOutputFormat->setInt32("Only-Submit-One-Input-Buffer-At-One-Time", 1);
+    }
+#endif
+
     if (mFlags & FLAG_USE_SURFACE_INPUT) {
         mOutputFormat->setInt32("create-input-buffers-suspended", 1);
     }
diff --git a/frameworks/base/media/java/android/media/AudioService.java b/frameworks/base/media/java/android/media/AudioService.java
index 41dc270..e385976 100644
--- a/frameworks/base/media/java/android/media/AudioService.java
+++ b/frameworks/base/media/java/android/media/AudioService.java
@@ -274,7 +274,7 @@ public class AudioService extends IAudioService.Stub {
 
    /** @hide Maximum volume index values for audio streams */
     private static int[] MAX_STREAM_VOLUME = new int[] {
-        5,  // STREAM_VOICE_CALL
+        7,  // STREAM_VOICE_CALL
         7,  // STREAM_SYSTEM
         7,  // STREAM_RING
         15, // STREAM_MUSIC
@@ -287,7 +287,7 @@ public class AudioService extends IAudioService.Stub {
     };
 
     private static int[] DEFAULT_STREAM_VOLUME = new int[] {
-        4,  // STREAM_VOICE_CALL
+        7,  // STREAM_VOICE_CALL
         7,  // STREAM_SYSTEM
         5,  // STREAM_RING
         11, // STREAM_MUSIC
diff --git a/frameworks/native/include/gui/GLConsumer.h b/frameworks/native/include/gui/GLConsumer.h
index e03de45..20d81c4 100644
--- a/frameworks/native/include/gui/GLConsumer.h
+++ b/frameworks/native/include/gui/GLConsumer.h
@@ -429,8 +429,14 @@ private:
     // glCopyTexSubImage to read from the texture.  This is a hack to work
     // around a GL driver limitation on the number of FBO attachments, which the
     // browser's tile cache exceeds.
-    const uint32_t mTexTarget;
-
+#ifdef DECIDE_TEXTURE_TARGET
+protected:
+    uint32_t mTexTarget;
+private:
+#else
+     const uint32_t mTexTarget;
+#endif
+ 
     // EGLSlot contains the information and object references that
     // GLConsumer maintains about a BufferQueue buffer slot.
     struct EglSlot {
diff --git a/frameworks/native/libs/gui/Android.mk b/frameworks/native/libs/gui/Android.mk
index 9770da2..f810f0c 100644
--- a/frameworks/native/libs/gui/Android.mk
+++ b/frameworks/native/libs/gui/Android.mk
@@ -68,6 +68,10 @@ ifeq ($(TARGET_BOARD_PLATFORM), tegra3)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+	LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifeq ($(TARGET_SAMSUNG_GRALLOC_EXTERNAL_USECASES),true)
 	LOCAL_CFLAGS += -DSAMSUNG_GRALLOC_EXTERNAL_USECASES
 endif
diff --git a/frameworks/native/services/surfaceflinger/Android.mk b/frameworks/native/services/surfaceflinger/Android.mk
index f9a6852..69a6cd3 100644
--- a/frameworks/native/services/surfaceflinger/Android.mk
+++ b/frameworks/native/services/surfaceflinger/Android.mk
@@ -87,6 +87,10 @@ else
     LOCAL_CFLAGS += -DPRESENT_TIME_OFFSET_FROM_VSYNC_NS=0
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 ifneq ($(MAX_VIRTUAL_DISPLAY_DIMENSION),)
     LOCAL_CFLAGS += -DMAX_VIRTUAL_DISPLAY_DIMENSION=$(MAX_VIRTUAL_DISPLAY_DIMENSION)
 else
diff --git a/frameworks/native/services/surfaceflinger/Layer.cpp b/frameworks/native/services/surfaceflinger/Layer.cpp
index 0d8b009..378ba56 100755
--- a/frameworks/native/services/surfaceflinger/Layer.cpp
+++ b/frameworks/native/services/surfaceflinger/Layer.cpp
@@ -1419,8 +1419,14 @@ Region Layer::latchBuffer(bool& recomputeVisibleRegions)
         Reject r(mDrawingState, getCurrentState(), recomputeVisibleRegions,
                 getProducerStickyTransform() != 0);
 
+#ifdef DECIDE_TEXTURE_TARGET
         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
-                mFlinger->mPrimaryDispSync);
+                mFlinger->mPrimaryDispSync, &mTexture);
+#else
+         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r,
+                 mFlinger->mPrimaryDispSync);
+#endif
+
         if (updateResult == BufferQueue::PRESENT_LATER) {
             // Producer doesn't want buffer to be displayed yet.  Signal a
             // layer update so we check again at the next opportunity.
diff --git a/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp b/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
index 22096ad..a40edce 100644
--- a/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
+++ b/frameworks/native/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
@@ -208,8 +208,14 @@ void GLES11RenderEngine::setupLayerTexturing(const Texture& texture) {
     glMatrixMode(GL_TEXTURE);
     glLoadMatrixf(texture.getMatrix().asArray());
     glMatrixMode(GL_MODELVIEW);
-    glDisable(GL_TEXTURE_2D);
-    glEnable(GL_TEXTURE_EXTERNAL_OES);
+#ifdef DECIDE_TEXTURE_TARGET
+    glDisable((target == Texture::TEXTURE_2D) ?
+            GL_TEXTURE_EXTERNAL_OES : GL_TEXTURE_2D);
+    glEnable(target);
+#else
+     glDisable(GL_TEXTURE_2D);
+     glEnable(GL_TEXTURE_EXTERNAL_OES);
+#endif
 }
 
 void GLES11RenderEngine::setupLayerBlackedOut() {
diff --git a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 7de6ac4..1014dcb 100644
--- a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -23,15 +23,27 @@
 
 #include <utils/Errors.h>
 #include <utils/NativeHandle.h>
+
+#ifdef DECIDE_TEXTURE_TARGET
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#endif
+
 #include <utils/Trace.h>
 
 namespace android {
 
 // ---------------------------------------------------------------------------
 
+#ifdef DECIDE_TEXTURE_TARGET
 status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
-        const DispSync& dispSync)
+        const DispSync& dispSync, Texture* mTexture)
 {
+#else
+ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
+         const DispSync& dispSync)
+ {
+#endif
     ATRACE_CALL();
     ALOGV("updateTexImage");
     Mutex::Autolock lock(mMutex);
@@ -75,6 +87,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter,
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
diff --git a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
index 28f2f6a..632ff82 100644
--- a/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
+++ b/frameworks/native/services/surfaceflinger/SurfaceFlingerConsumer.h
@@ -20,6 +20,10 @@
 #include "DispSync.h"
 #include <gui/GLConsumer.h>
 
+#ifdef DECIDE_TEXTURE_TARGET
+#include "RenderEngine/Texture.h"
+#endif
+
 namespace android {
 // ----------------------------------------------------------------------------
 
@@ -53,7 +57,11 @@ public:
     // reject the newly acquired buffer.  Unlike the GLConsumer version,
     // this does not guarantee that the buffer has been bound to the GL
     // texture.
-    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#ifdef DECIDE_TEXTURE_TARGET
+    status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync, Texture* mTexture = 0);
+#else
+     status_t updateTexImage(BufferRejecter* rejecter, const DispSync& dispSync);
+#endif
 
     // See GLConsumer::bindTextureImageLocked().
     status_t bindTextureImage();
